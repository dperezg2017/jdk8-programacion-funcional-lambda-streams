1: Utilitario:

    test: 
     public static void main (String[] args) {
       List<String> nombres = Arrays.asList("cortocortocorto", "medianomediano", "largo");
       List<Integer> numeros = Arrays.asList(5,7,1,6,3,4,2);
       
       Comparator<String> comparadorLongitud = (o1, o2) -> o1.length() - o2.length();
       Comparator<Integer> ordenaNumero = (o1,o2) -> o1.compareTo(o2);
       
       Collections.sort(nombres,comparadorLongitud);
       Collections.sort(numeros,ordenaNumero);
       Collections.reverse(numeros);
       
       System.out.println(nombres);
       System.out.println(numeros);
     }
    resultado:
      [largo, medianomediano, cortocortocorto]
      [7, 6, 5, 4, 3, 2, 1]

2: Funcional Interface: se agrega la anotacion para definirlo, solo se aceptan un metodo abstract
  Aprender mas de 40 interfaces funcionales que trae jdk 8 
  - BiConsumer,BiFunction,BinaryOperator, Interface UnaryOperator<T>(interfaces para el caso específico de T primitivo
    int, long, double)...

  #Anotacion para aceptar solo interfaes funcionales y solo 1 abstract
	 @FunctionalInterface
	 public interface FunctionalService {
  
	     int suma(int a, int b);
  
	     default int suma (int a, int b, int c){
	         return suma(a,suma(a,b));
	     }
	     static int suma3(int a, int b, int c){
	         return 1;
	     }
	 }
   # Composiciones con Function
   Function<Persona, String> nombre = per -> per.getNombre(); 
   nombre = nombre.andThen(it -> it.toUpperCase());

   #compose : añadir funcionalidad anterior
   Function<Coche, Persona> propietario = it -> it.getPropietario(); 
   Function<Persona, String> nombre = per -> per.getNombre();
   Function<Coche, String> nombrePropietario = nombre.compose(propietario);

   #acepta parametro pero no produce resultado, sirve para imprimir por consola
   Consumer<String> impresor = (it) -> {System.out.println(it);}

   #sin ningun parametro, que produce valor 
   Random random = new Random();
   Supplier<Integer> generador = () -> random.nextInt();

   #resultado de evaluar un objeto es cierto o falso(IntPredicate LongPredicate DoublePredicate)
   Predicate<String> cadenaCorta = it -> it.length() < 10;

3: Stream: codigo declarativo, gestion de la complejidad, integracion con API Funcional, uso potencial de paralelismo

    /* metodo Simple */
    private List<String> convertCollectionVersion(List<Persona> personas){
        List<String> nombres = new ArrayList<>();
        for (Persona persona:personas)
            nombres.add(persona.getNombre());
        return nombres;
    }

    /* metodo Streams */
    private List<String> convertStreamVersion(List<Persona> personas){
        return personas.stream()
                .map(it -> it.getNombre())
                .collect(Collectors.toList());
    }

      # Metodo STREAM PIPELINE para practicar con strem usando herramientas de el. 
      @Test
      public void stream_filtrar_ordenar_convertir() {
          Persona persona = new Persona("Deyviz");
          Persona persona2 = new Persona("Lesly");
          Persona persona3 = new Persona("Arepa");
          List<Persona> simplePersonas = new ArrayList<>();
          simplePersonas.add(persona);
          simplePersonas.add(persona2);
          simplePersonas.add(persona3);
          
          String todos = simplePersonas.stream()
                  .map(it -> it.getNombre())
                  .sorted((o1,o2)->o1.length()+o2.length())
                  .map(it -> "'"+it+"'")
                  .reduce("",(a,b)->a+"\n"+b);

          LOGGER.info("stream_filtrar :{}",todos);
      }








